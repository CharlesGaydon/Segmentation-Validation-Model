name: CICD

on:
  # Run CICD for non-draft pull request
  pull_request:
    branches:
      # - dev
      - main
  # Also run when the pull request merges (which generates a push)
  # So that we can tag the docker image appropriately.
  push:
    branches:
      - add-documentation  # TODO: remove when the tagging process is OK
      - prod
      - main

jobs:
  lidar_on_docker:
    runs-on: self-hosted

    steps:

    - name: Checkout branch       
      uses: actions/checkout@v2

    - name: build docker image       
      run: docker build -t lidar_prod_im .

    # - name: Check code neatness (linter)
    #   run: docker run lidar_prod_im flake8

    # - name: Run tests - fast ones go first.
    #   run: docker run lidar_prod_im python -m pytest -v -m "not slow" --ignore=actions-runner

    # - name: Run slow tests last.
    #   run: >
    #     docker run 
    #     -v /var/data/cicd/CICD_github_assets/M8.4/inputs/evaluation/:/lidar/lidar-prod-quality-control/tests/files/large/
    #     lidar_prod_im
    #     python -m
    #     pytest -v -m slow
    #     --ignore=actions-runner
    #     --no-cov

    # - name: Full module run on LAS subset using CLI.
    #   run: >
    #     docker run 
    #     -v /var/data/cicd/CICD_github_assets/M8.4/inputs/:/inputs/
    #     -v /var/data/cicd/CICD_github_assets/M8.4/outputs/:/outputs/
    #     lidar_prod_im
    #     python 
    #     lidar_prod/run.py
    #     print_config=true
    #     paths.src_las=/inputs/730000_6360000.subset.prototype_format202.las
    #     paths.output_dir=/outputs/

    # # This is somewhat redundant with unit test but may serve a a doc on usage ?
    # - name: Evaluate decisions using optimization task (debug mode means on a single, corrected LAS) using CLI.
    #   run: >
    #     docker run
    #     -v /var/data/cicd/CICD_github_assets/M8.4/inputs/evaluation/:/inputs/
    #     -v /var/data/cicd/CICD_github_assets/M8.4/outputs/evaluation/:/outputs/
    #     lidar_prod_im
    #     python lidar_prod/run.py
    #     print_config=true
    #     +task='optimize'
    #     +building_validation.optimization.debug=true
    #     building_validation.optimization.todo='prepare+evaluate+update'
    #     building_validation.optimization.paths.input_las_dir=/inputs/
    #     building_validation.optimization.paths.results_output_dir=/outputs/
    #     building_validation.optimization.paths.building_validation_thresholds_pickle=/inputs/optimized_thresholds.pickle

    # Everything ran so we tag the valid docker image
    - name: Get the branch name.
      if: github.event_name == 'push' || always()
      uses: nelonoel/branch-name@v1.0.1

    - name: Print branch name
      if: github.event_name == 'push' || always()
      run: echo ${BRANCH_NAME}

    - name: Tag the docker image with branch name.
      if: github.event_name == 'push' || always()
      run: docker tag lidar_prod_im:latest lidar_prod_im:${BRANCH_NAME}

    - name: Dry run image so that is it not prunned.
      if: github.event_name == 'push' || always()    
      run: docker run lidar_prod_im:${BRANCH_NAME} bash

    - name: Clean dangling images.
      if: always()  # always do it, even if something failed
      run: docker system prune  # remove obsolete docker images (take a HUGE amount of space)


      
