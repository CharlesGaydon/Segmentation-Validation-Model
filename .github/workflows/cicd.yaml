name: CICD

on:
  # Run CICD for non-draft pull request
  pull_request:
    branches:
      - dev
      - main
  # Also run when the pull request merges (which generates a push)
  # So that we can tag the docker image appropriately.
  push:
    branches:
      - dev
      - prod
      - main

jobs:
  build_test_deploy:
    runs-on: self-hosted

    steps:

    - name: Checkout branch       
      uses: actions/checkout@v2

    - name: build docker image       
      run: docker build -t lidar_prod_im .

    - name: Check code neatness (linter)
      run: docker run lidar_prod_im flake8

    - name: Run tests & get coverage - fast ones go first.
      run: >
        docker run
        lidar_prod_im
        python -m
        pytest -rA -v -m "not slow" --ignore=actions-runner

    - name: Run slow tests last (evaluation on large file)
      run: >
        docker run
        -v /var/data/cicd/CICD_github_assets/M8.4/inputs/evaluation/:/lidar/tests/files/large/
        lidar_prod_im
        python -m
        pytest -rA -v -m "slow" --ignore=actions-runner --no-cov

    - name: Test detection of building.
      run: >
        docker run 
        -v /var/data/cicd/CICD_github_assets/M8.4/inputs/:/inputs/
        -v /var/data/cicd/CICD_github_assets/M8.4/outputs/:/outputs/
        lidar_prod_im
        python 
        lidar_prod/run.py
        data_format=legacy.yaml
        +task=apply_on_building
        paths.src_las=/inputs/730000_6360000.subset.prototype_format202.las
        paths.output_dir=/outputs/

    - name: Test vegetation/unclassified detection from CLI on a LAS subset.
      run: >
        docker run 
        -v /var/data/cicd/CICD_github_assets/M8.4/inputs/:/inputs/
        -v /var/data/cicd/CICD_github_assets/M8.4/outputs/:/outputs/
        lidar_prod_im
        python 
        lidar_prod/run.py
        +task=identify_vegetation_unclassified
        data_format=vegetation_unclassified.yaml
        paths.src_las=/inputs/888000_6614000.subset.las
        paths.output_dir=/outputs/

    # Everything ran so we tag the valid docker image to keep it
    # This happens for push events, which are in particular 
    # triggered when a pull request is merged.
    - name: Get the branch name into an environment variable.
      if: github.event_name == 'push'
      uses: nelonoel/branch-name@v1.0.1

    # show the branch name, for debugging purpose
    - name: Print the branch name
      if: github.event_name == 'push'
      run: echo ${BRANCH_NAME}

    - name: Tag the docker image with branch name
      if: github.event_name == 'push'
      run: docker tag lidar_prod_im:latest lidar_prod_im:${BRANCH_NAME}

    - name: Dry run image so that is it not prunned
      if: github.event_name == 'push'
      run: docker run lidar_prod_im:${BRANCH_NAME} bash

    # This needs writing rights to the mounted path
    - name: save the docker image since everything worked
      if: github.event_name == 'push'
      run: docker save lidar_prod_im:${BRANCH_NAME} -o /var/data/cicd/CICD_github_assets/CICD_docker_images/lidar_prod_im_${BRANCH_NAME}.tar

    # get the version number, to tag the image pushed to nexus
    - name: get version number
      if: github.event_name == 'push'
      id: version
      run: echo "::set-output name=version::$(docker run lidar_prod_im grep '__version__' package_metadata.yaml| cut -d\" -f2)"

    # show the version number, for debugging purpose
    - name: Print the version
      if: github.event_name == 'push'
      run: echo "${{steps.version.outputs.version}}"

    - name: push docker on nexus
      if: ${{ ((github.event.review.state == 'approved') && (BRANCH_NAME == 'main')) }}  # we push on nexus only if a pull request on the main branch has been accepted
      run: |
        docker tag lidar_prod_im 10.128.81.69:8082/lidar_hd/lidar_prod_im:${{steps.version.outputs.version}}
        docker login 10.128.81.69:8082 --username svc_lidarhd --password ${{ secrets.PASSWORD_SVC_LIDARHD }}
        docker push 10.128.81.69:8082/lidar_hd/lidar_prod_im:${{steps.version.outputs.version}}

    - name: Clean dangling docker images
      if: always()  # always do it, even if something failed
      run: docker system prune --force # remove dangling docker images, without asking user for confirmation
